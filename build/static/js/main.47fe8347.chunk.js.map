{"version":3,"sources":["components/listTask/index.tsx","components/itemTask/index.tsx","page/taskList/taskList.view.tsx","components/taskModal/index.tsx","components/deleteModal/index.tsx","context/index.tsx","page/taskList/taskList.container.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TitleEnum","ItemTask","props","useState","edit","setEdit","task","setTask","useEffect","checked","onChange","taskEdit","editTask","defaultValue","event","target","value","className","CloseCircleOutlined","onClick","CheckCircleOutlined","EditFilled","DeleteFilled","selectTask","onDeleteOpen","Search","Input","ListTask","taskList","filter","title","Pending","list","setList","search","setSearch","sortAlpha","setSortAlpha","showPopover","setShowPopover","listTask","includes","sort","a","b","size","placeholder","allowClear","onSearch","console","log","placement","content","trigger","visible","onVisibleChange","FilterFilled","dataSource","renderItem","Item","onOpen","type","block","TaskModal","showModal","onCancel","taskSelected","createTask","destroyOnClose","footer","form","htmlType","centered","labelCol","span","wrapperCol","layout","id","onFinish","values","newTask","uuid","v4","fields","name","label","rules","required","message","initialValue","valuePropName","DeleteModal","deleteTask","onOk","TaskListView","sm","md","Complete","addTask","showDeleteModal","onDeleteCancel","TaskContext","React","createContext","TaskProvider","children","setTaskList","valueProvider","map","Provider","TaskListContainer","setShowModal","showModalDelete","setShowModalDelete","setTaskSelected","listPendingTask","listFinisTask","handleCloseModal","handleOpenModal","handleCloseDeleteModal","handleOpenDeleteModal","RenderTaskList","Consumer","App","style","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.47fe8347.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Task } from \"../../interfaces/interfaces\";\r\nimport { Button, List, Input, Popover } from \"antd\";\r\nimport { ItemTask } from \"../itemTask\";\r\nimport { FilterFilled } from \"@ant-design/icons\";\r\nimport \"./index.scss\";\r\n\r\nconst { Search } = Input;\r\n\r\ninterface ListTaskProps {\r\n    title: TitleEnum;\r\n    taskList: Task[];\r\n    onOpen(): void;\r\n    onDeleteOpen(): void;\r\n    selectTask: (task: Task | null) => void;\r\n    editTask: (taskEdit: Task) => void;\r\n}\r\nenum TitleEnum {\r\n    Pending = \"Pendiente\",\r\n    Complete = \"Completado\",\r\n}\r\n\r\nexport const ListTask = (props: ListTaskProps) => {\r\n    const [list, setList] = useState<Task[]>(\r\n        props.taskList.filter((task) =>\r\n            props.title === TitleEnum.Pending ? !task.checked : task.checked\r\n        )\r\n    );\r\n    const [search, setSearch] = useState<string>(\"\");\r\n    const [sortAlpha, setSortAlpha] = useState<boolean>(false);\r\n    const [showPopover, setShowPopover] = useState<boolean>(false);\r\n\r\n    const onSearch = (value: string) => console.log(value);\r\n\r\n    useEffect(() => {\r\n        let listTask = props.taskList.filter((task) =>\r\n            props.title === TitleEnum.Pending ? !task.checked : task.checked\r\n        );\r\n\r\n        listTask = listTask.filter((task: Task) => task.task.includes(search));\r\n        if (sortAlpha) {\r\n            listTask = listTask.sort((a: Task, b: Task) => {\r\n                if (a.task > b.task) {\r\n                    return 0;\r\n                }\r\n                return -1;\r\n            });\r\n        }\r\n        setList(listTask);\r\n    }, [props.taskList, search, sortAlpha]);\r\n\r\n    return (\r\n        <div className=\"task-list\">\r\n            <div className=\"header\">\r\n                <h1>{props.title}</h1>\r\n                <Search\r\n                    size=\"large\"\r\n                    placeholder=\"Nombre de la tarea\"\r\n                    allowClear\r\n                    onSearch={onSearch}\r\n                    onChange={(event) => setSearch(event.target.value)}\r\n                />\r\n                <Popover\r\n                    placement=\"bottom\"\r\n                    content={\r\n                        <p\r\n                            className=\"opt-popover\"\r\n                            onClick={() => {\r\n                                setSortAlpha(!sortAlpha);\r\n                                setShowPopover(false);\r\n                            }}\r\n                        >\r\n                            Alfabético\r\n                        </p>\r\n                    }\r\n                    title=\"Orden\"\r\n                    trigger=\"click\"\r\n                    visible={showPopover}\r\n                    onVisibleChange={() => setShowPopover(true)}\r\n                >\r\n                    <FilterFilled className=\"icon-filter\" />\r\n                </Popover>\r\n            </div>\r\n            <List\r\n                dataSource={list}\r\n                renderItem={(task: Task) => (\r\n                    <List.Item>\r\n                        <ItemTask\r\n                            task={task}\r\n                            onOpen={props.onOpen}\r\n                            selectTask={props.selectTask}\r\n                            onDeleteOpen={props.onDeleteOpen}\r\n                            editTask={props.editTask}\r\n                        />\r\n                    </List.Item>\r\n                )}\r\n            />\r\n            <Button\r\n                className=\"btn-add\"\r\n                type=\"primary\"\r\n                block\r\n                onClick={() => {\r\n                    props.selectTask(null);\r\n                    props.onOpen();\r\n                }}\r\n            >\r\n                +\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Checkbox, Input } from \"antd\";\r\nimport \"./index.scss\";\r\nimport {\r\n    EditFilled,\r\n    DeleteFilled,\r\n    CloseCircleOutlined,\r\n    CheckCircleOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Task } from \"../../interfaces/interfaces\";\r\n\r\ninterface ItemTaskProps {\r\n    task: Task;\r\n    onOpen(): void;\r\n    onDeleteOpen(): void;\r\n    selectTask: (task: Task | null) => void;\r\n    editTask: (taskEdit: Task) => void;\r\n}\r\n\r\nexport const ItemTask = (props: ItemTaskProps) => {\r\n    const [edit, setEdit] = useState<boolean>(false);\r\n    const [task, setTask] = useState(props.task.task);\r\n\r\n    useEffect(() => {\r\n        setTask(props.task.task)\r\n    }, [props.task.task])\r\n    return (\r\n        <>\r\n            <Checkbox\r\n                checked={props.task.checked}\r\n                onChange={() => {\r\n                    const taskEdit = { ...props.task, checked: !props.task.checked, };\r\n                    props.editTask(taskEdit);\r\n                }}\r\n            >\r\n                {!edit ? props.task.task : null}\r\n            </Checkbox>\r\n            {edit ? (\r\n                <Input\r\n                    key=\"task\"\r\n                    defaultValue={props.task.task}\r\n                    onChange={(event) => {setTask(event.target.value)}}\r\n                />\r\n            ) : null}\r\n            <div className=\"content-icons\">\r\n                {!edit ? (\r\n                    <EditFilled\r\n                        onClick={() => {\r\n                            setTask(props.task.task)\r\n                            setEdit(true);\r\n                        }}\r\n                    />\r\n                ) : (\r\n                    <>\r\n                        <CloseCircleOutlined\r\n                            className=\"icon-cancel\"\r\n                            onClick={() => {\r\n                                setEdit(false);\r\n                            }}\r\n                        />\r\n                        <CheckCircleOutlined\r\n                            className=\"icon-edit\"\r\n                            onClick={() => {\r\n                                const taskEdit = { ...props.task, task };\r\n                                props.editTask(taskEdit);\r\n                                setEdit(false);\r\n                            }}\r\n                        />\r\n                    </>\r\n                )}\r\n                <DeleteFilled\r\n                    onClick={() => {\r\n                        props.selectTask(props.task);\r\n                        props.onDeleteOpen();\r\n                    }}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Row, Col } from \"antd\";\r\nimport { ListTask } from \"../../components/listTask\";\r\nimport \"./styles.scss\";\r\nimport { ContextProps, Task } from \"../../interfaces/interfaces\";\r\nimport TaskModal from \"../../components/taskModal\";\r\nimport { DeleteModal } from \"../../components/deleteModal\";\r\n\r\ninterface TaskListViewProps extends ContextProps {\r\n    taskList: Task[];\r\n    listPendingTask: Task[];\r\n    listFinisTask: Task[];\r\n    showModal: boolean;\r\n    onOk?(): void;\r\n    onCancel(): void;\r\n    onOpen(): void;\r\n    onDeleteOpen(): void;\r\n    showDeleteModal: boolean;\r\n    onDeleteCancel(): void;\r\n    taskSelected: Task | null;\r\n    selectTask: (task: Task | null) => void;\r\n}\r\n\r\nenum TitleEnum {\r\n    Pending = \"Pendiente\",\r\n    Complete = \"Completado\",\r\n  }\r\n\r\nexport const TaskListView = (props: TaskListViewProps) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <Row className=\"content-list\">\r\n                <Col sm={24} md={12}>\r\n                    <ListTask\r\n                        title={TitleEnum.Pending}\r\n                        taskList={props.taskList}\r\n                        onOpen={props.onOpen}\r\n                        selectTask={props.selectTask}\r\n                        onDeleteOpen={props.onDeleteOpen}\r\n                        editTask={props.editTask}\r\n                    />\r\n                </Col>\r\n                <Col sm={24} md={12}>\r\n                    <ListTask\r\n                        title={TitleEnum.Complete}\r\n                        taskList={props.taskList}\r\n                        onOpen={props.onOpen}\r\n                        selectTask={props.selectTask}\r\n                        onDeleteOpen={props.onDeleteOpen}\r\n                        editTask={props.editTask}\r\n                    />\r\n                </Col>\r\n                <TaskModal\r\n                    showModal={props.showModal}\r\n                    onCancel={props.onCancel}\r\n                    taskSelected={props.taskSelected}\r\n                    editTask={props.editTask}\r\n                    createTask={props.addTask}\r\n                />\r\n                <DeleteModal\r\n                    showModal={props.showDeleteModal}\r\n                    onCancel={props.onDeleteCancel}\r\n                    taskSelected={props.taskSelected}\r\n                    deleteTask={props.deleteTask}\r\n                />\r\n            </Row>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport { Store } from \"antd/lib/form/interface\";\r\nimport \"./index.scss\";\r\nimport { Form, Input, Button, Checkbox } from \"antd\";\r\nimport uuid from \"uuid\";\r\nimport { Task } from \"../../interfaces/interfaces\";\r\n\r\ninterface TaskModalProps {\r\n    showModal: boolean;\r\n    onCancel?(): void;\r\n    taskSelected: Task | null;\r\n    editTask: (taskEdit: Task) => void;\r\n    createTask: (newTask: Task) => void;\r\n}\r\n\r\ninterface IStore extends Task, Store {}\r\n\r\nconst TaskModal = ({\r\n    showModal,\r\n    onCancel,\r\n    taskSelected,\r\n    editTask,\r\n    createTask,\r\n}: TaskModalProps) => {\r\n    const onFinish = (values: IStore) => {\r\n\r\n        let newTask: Task = {\r\n            id: taskSelected ? taskSelected.id : uuid.v4(),\r\n            checked: values.checked,\r\n            task: values.task,\r\n        };\r\n\r\n        if (taskSelected) {\r\n            editTask(newTask);\r\n        } else {\r\n            createTask(newTask);\r\n        }\r\n\r\n        /*// @ts-ignore */\r\n        onCancel();\r\n    };\r\n    const closeModal = () => {\r\n        /*// @ts-ignore */\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                title={taskSelected ? \"Editar tarea\" : \"Nueva tarea\"}\r\n                visible={showModal}\r\n                onCancel={onCancel}\r\n                destroyOnClose={true}\r\n                footer={[\r\n                    <Button key=\"back\" onClick={() => closeModal()}>\r\n                        Cancelar\r\n                    </Button>,\r\n                    <Button\r\n                        form=\"myForm\"\r\n                        key=\"submit\"\r\n                        htmlType=\"submit\"\r\n                        type=\"primary\"\r\n                    >\r\n                        {taskSelected ? \"Editar\" : \"Crear\"}\r\n                    </Button>,\r\n                ]}\r\n                centered\r\n            >\r\n                <div>\r\n                    <Form\r\n                        labelCol={{ span: 4 }}\r\n                        wrapperCol={{ span: 20 }}\r\n                        layout=\"horizontal\"\r\n                        id=\"myForm\"\r\n                        onFinish={onFinish}\r\n                        fields={[\r\n                            {\r\n                                name: [\"task\"],\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Form.Item\r\n                            label=\"Tarea\"\r\n                            name=\"task\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: \"Por favor ingrese la tarea!\",\r\n                                },\r\n                            ]}\r\n                            initialValue={taskSelected ? taskSelected.task : \"\"}\r\n                        >\r\n                            <Input\r\n                                key=\"task\"\r\n                                value={taskSelected ? taskSelected.task : \"\"}\r\n                            />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"checked\"\r\n                            valuePropName=\"checked\"\r\n                            initialValue={\r\n                                taskSelected ? taskSelected.checked : false\r\n                            }\r\n                        >\r\n                            <Checkbox checked={taskSelected?.checked}>\r\n                                Completada\r\n                            </Checkbox>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TaskModal;\r\n","import { DeleteFilled } from \"@ant-design/icons\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport { Task } from \"../../interfaces/interfaces\";\r\nimport \"./index.scss\";\r\n\r\ninterface TaskModalProps {\r\n    showModal: boolean;\r\n    onCancel(): void;\r\n    taskSelected: Task | null;\r\n    deleteTask: (id: string) => void;\r\n}\r\n\r\nexport const DeleteModal = ({\r\n    showModal,\r\n    onCancel,\r\n    taskSelected,\r\n    deleteTask\r\n}: TaskModalProps) => {\r\n    return (\r\n        <>\r\n            {taskSelected ? (\r\n                <Modal\r\n                    title=\"Remove task\"\r\n                    visible={showModal}\r\n                    onOk={() => {\r\n                        deleteTask(taskSelected.id)\r\n                        onCancel();\r\n                    }}\r\n                    onCancel={onCancel}\r\n                    destroyOnClose={true}\r\n                    centered\r\n                >\r\n                    <div className=\"modal-content\">\r\n                        <DeleteFilled className=\"icon-modal\" />\r\n                        <p>\r\n                            Estas seguro que deseas eliminar la tarea \"\r\n                            {taskSelected.task}\"?\r\n                        </p>\r\n                    </div>\r\n                </Modal>\r\n            ) : null}\r\n        </>\r\n    );\r\n};\r\n","import React, { ReactNode, useState } from \"react\";\r\nimport { Task, ContextProps} from \"../interfaces/interfaces\";\r\n\r\n\r\nexport const TaskContext = React.createContext<ContextProps | null>(null);\r\n\r\ninterface TaskProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\nconst TaskProvider = ({ children }: TaskProviderProps) => {\r\n    const [taskList, setTaskList] = useState<Task[]>([]);\r\n\r\n    const addTask = (newTask: Task) => {\r\n        setTaskList([...taskList, newTask])\r\n      }\r\n  \r\n    const deleteTask = (id: string) => {\r\n        const list : Task[] = taskList.filter((task) => task.id !== id);\r\n        setTaskList(list)\r\n      }\r\n  \r\n      const editTask = (taskEdit: Task) => {\r\n        const list : Task[] = taskList.map((task: Task) => {\r\n          if (taskEdit.id === task.id) {\r\n            return {\r\n              ...task,\r\n              task: taskEdit.task,\r\n              checked: taskEdit.checked,\r\n            };\r\n          }\r\n          return task;\r\n        })\r\n        setTaskList(list)\r\n      }\r\n\r\n    const valueProvider: ContextProps = {\r\n        taskList,\r\n        addTask,\r\n        deleteTask,\r\n        editTask\r\n    };\r\n\r\n    return (\r\n        <TaskContext.Provider value={valueProvider}>\r\n            {children}\r\n        </TaskContext.Provider>\r\n    );\r\n};\r\n\r\nexport default TaskProvider;","import React, { useState } from \"react\";\r\nimport { TaskListView } from \"./taskList.view\";\r\nimport { ContextProps, Task } from \"../../interfaces/interfaces\";\r\nimport TaskProvider, { TaskContext } from \"../../context\";\r\n\r\nexport const TaskListContainer = () => {\r\n    const [showModal, setShowModal] = useState<boolean>(false);\r\n    const [showModalDelete, setShowModalDelete] = useState<boolean>(false);\r\n    const [taskSelected, setTaskSelected] = useState<Task | null>(null);\r\n    const [listPendingTask, setListPendingTask] = useState<Task[]>([]);\r\n    const [listFinisTask, setListFinisTask] = useState<Task[]>([]);\r\n\r\n    const handleCloseModal = (): void => {\r\n        setShowModal(false);\r\n    };\r\n\r\n    const handleOpenModal = (): void => {\r\n        setShowModal(true);\r\n    };\r\n\r\n    const selectTask = (task: Task | null): void => {\r\n        setTaskSelected(task);\r\n    };\r\n\r\n    const handleCloseDeleteModal = (): void => {\r\n        setShowModalDelete(false);\r\n    };\r\n\r\n    const handleOpenDeleteModal = (): void => {\r\n        setShowModalDelete(true);\r\n    };\r\n\r\n    const RenderTaskList = (props: ContextProps) => {\r\n        return (\r\n            <TaskListView\r\n                showModal={showModal}\r\n                onCancel={handleCloseModal}\r\n                showDeleteModal={showModalDelete}\r\n                onDeleteCancel={handleCloseDeleteModal}\r\n                onOpen={handleOpenModal}\r\n                onDeleteOpen={handleOpenDeleteModal}\r\n                taskSelected={taskSelected}\r\n                selectTask={selectTask}\r\n                {...props}\r\n                listPendingTask={listPendingTask}\r\n                listFinisTask={listFinisTask}\r\n            />\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <TaskProvider>\r\n                <TaskContext.Consumer>\r\n                    {(props: ContextProps | null) =>\r\n                        props ? <RenderTaskList {...props} /> : null\r\n                    }\r\n                </TaskContext.Consumer>\r\n            </TaskProvider>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\nimport { TaskList } from './page/taskList'\n\n\nfunction App() {\n  return (\n      <div style={{width: '100%', height: '100%'}}>\n         <TaskList /> \n      </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}